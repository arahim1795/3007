package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short INT = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short IF = 16;
		static public final short RBRACKET = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLcTqL4KOlMyt13O2QuYX29eO8AH2A0a1qao0X8Gaz0uAY1LGKB43DgpOXNFueUVuGnG" +
		"LHC1OK368iOCD10ke88Xen8PY#RnltcHvUVjsapt8EUwU#xMvyysyUVE#6S2p04Cn02Cm2g" +
		"Cn0ON8msNeZrmaO06kGdjqH2USYixeWjDmEaw9YDqX8dRNiEnK1piSDpq2RfQ3UotEmNcem" +
		"XYCnJYCXqU#mY8inlL8GWjqntt8G6$qTVBaqMCyEKgUrvs7Unsyg50yF10OjoLv9uVWtI4I" +
		"uDqVUduu4qM1SVyapwzvphKvIwrDyw8zL7GkBiObc8Vvk1JJE4u9ff0vCi0ingoWdZrTysM" +
		"xHWUvHcUuHiztZLuK9ZhHiKx3R3FlvsoLRK5yfx#mIORJjwzL8GeYxd#yVXkKeLJ9SaHZ25" +
		"h1fsGCJa9hBQjjSxmDjwWlPp2jTah6MJjBzYDHxp5BNeZ9k46put4dpa0isYgl0iDHQKcfn" +
		"tMOB8TnXUp3pV8ZhfPzZDsEDFaQtP2C5Do4JFH27#fyv60IfihxE1ipSG57c4D$8ARpVouk" +
		"nspSY2jnZHp04la6j$9jBCLTk0Ttuq4iunULp3sRmbgInXgHmQmzcJUBtq4VVWdzkFzor9u" +
		"Om8o3k4F#B#mJnJNWOPsAObsBPerfnUfdlUqsV4ibh3X3#7xZMFETl94sNWnvHWXUHmUlRK" +
		"XUXqOyRmYU7sZM$0fPwzpcvxusaKGJkOUJU59rOmMjLEECS30h$uDHJbJKkKvsbZ#erHSKS" +
		"VgnJJB2ZMZEAzB#n#iNy7mgrd8muqErB5Uro9BsEHhwo#b4owTaMxsppDMnB4kQuvHgTWnl" +
		"4dvMMCkpxXQMjEPZIX$PbZPb0ll4iCN7EcbAFtKrPJvj7y#aOPGUUlcyDSNp7yksM5RiMFv" +
		"zr6OMyssqPxm5jPzV5B1yCTHl7h6AM4ji81ucweWzn3gYtkGr0F2OVOyIssXt8UA9EFfBg5" +
		"DrpXMqI#pzd61xTo9PyrVJ7gpZmm7Z8UfIEhNKcTJRTLirsrPIbzCvg6D3B6qir7wPOvmAj" +
		"gtH71CrEkxLCJwh9zhH9r6tRQNTDNZknevmp#R8bQxxBAKzGiT64fKwlfjsbRRtqnwjxNhQ" +
		"OxHzXFPOOaeJOutJkfWOh#sXn0Hj5pBNCfT#USHq8e4e8cOIitNRC6AgjkSIauWvn0nR$sb" +
		"QpoTc7OjZbDtcsBMsDTpYCezeM$k11bj4Tjdim#7M83WdMZdyUgqJjCwsZTbQnoeQzp4wXC" +
		"vl9EcvjwIzGlTVhzkYA0uu#9kqvdeRcrto7Mh#itaww$5sEkBjTAvCyzlKdBssCN9jTedka" +
		"zJSSKFCfIjpLRd4zJeRulOjDPqNZxZ4baF$v6$vIMbA#KD#boDm$EGt9R#KFR9Rlf3FvJFv" +
		"L4LsARapmFk4s17mjXCV4nyH7yexyhQmFifRyZhb5jaeBrDlb9VaHNb1QkHvUZNod3mh6sG" +
		"zxNNoZAoLfsMDh9Qdv4bvGbP9dRofCZzEl2jRbNnFHHvJSgMITVA6l2QRfLPUbKto2YCVgF" +
		"X19RyJLYlvLdwGx#LGewVSg#Il0VyN#Pbhyu#o$wAOo7jPDEz57WAy6tbvjda8y7mp0YZdM" +
		"L71CsyukGNq2zZUMvrp5lhOq9Sv6b35N5Nabj4keowbdwS0tYkDaCWcFuVeptEfFy$WNEe1" +
		"x3TGmSjRg8TtA8C0xquUddHU0hon60gzwFTGPryK0NMBoMAicjeDcUGMiRs8t4Bw9Z8OAsQ" +
		"CDPCdln50CkF9r2bD89LZfx5$EZ7gNpmqQBC=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = AccessSpec TypeName ID LPAREN ParameterList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = AccessSpec TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = AccessSpec TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] AccessSpec = PUBLIC
			Action.NONE,  	// [13] AccessSpec = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [23] ParameterList = Parameter ParameterT; returns 'ParameterT' although none is marked
			Action.NONE,  	// [24] ParameterList = 
			RETURN3,	// [25] ParameterT = COMMA Parameter ParameterT; returns 'ParameterT' although none is marked
			Action.NONE,  	// [26] ParameterT = 
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [28] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [29] Statements = 
			Action.RETURN,	// [30] Statement = LocalVarDec
			Action.RETURN,	// [31] Statement = Bloc
			Action.RETURN,	// [32] Statement = IfState
			Action.RETURN,	// [33] Statement = WhileState
			Action.RETURN,	// [34] Statement = BreakState
			Action.RETURN,	// [35] Statement = ReturnState
			Action.RETURN,	// [36] Statement = ExprState
			RETURN3,	// [37] LocalVarDec = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] Bloc = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [39] IfState = IF LPAREN Expr RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [40] IfState = IF LPAREN Expr RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [41] WhileState = WHILE LPAREN Expr RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [42] BreakState = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] ReturnState = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [44] ReturnState = RETURN Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [45] ExprState = Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [46] Exprs = NonEmptyExprs
			Action.NONE,  	// [47] Exprs = 
			RETURN2,	// [48] NonEmptyExprs = Expr NonEmptyExprsA; returns 'NonEmptyExprsA' although none is marked
			RETURN3,	// [49] NonEmptyExprsA = COMMA Expr NonEmptyExprsA; returns 'NonEmptyExprsA' although none is marked
			Action.NONE,  	// [50] NonEmptyExprsA = 
			Action.RETURN,	// [51] Expr = Assignment
			Action.RETURN,	// [52] Expr = RHSExpr
			RETURN3,	// [53] Assignment = LHSExpr EQL Expr; returns 'Expr' although none is marked
			RETURN2,	// [54] LHSExpr = ID LHSExprT; returns 'LHSExprT' although none is marked
			RETURN4,	// [55] LHSExprT = LBRACKET Expr RBRACKET LHSExprT; returns 'LHSExprT' although none is marked
			Action.NONE,  	// [56] LHSExprT = 
			Action.RETURN,	// [57] RHSExpr = ArExpr
			RETURN3,	// [58] RHSExpr = ArExpr ComOp ArExpr; returns 'ArExpr' although none is marked
			Action.RETURN,	// [59] ComOp = EQEQ
			Action.RETURN,	// [60] ComOp = NEQ
			Action.RETURN,	// [61] ComOp = LT
			Action.RETURN,	// [62] ComOp = LEQ
			Action.RETURN,	// [63] ComOp = GT
			Action.RETURN,	// [64] ComOp = GEQ
			RETURN2,	// [65] ArExpr = Term ArExprA; returns 'ArExprA' although none is marked
			RETURN3,	// [66] ArExprA = AddOp Term ArExprA; returns 'ArExprA' although none is marked
			Action.NONE,  	// [67] ArExprA = 
			Action.RETURN,	// [68] AddOp = PLUS
			Action.RETURN,	// [69] AddOp = MINUS
			RETURN2,	// [70] Term = Factor TermA; returns 'TermA' although none is marked
			RETURN3,	// [71] TermA = MulOp Factor TermA; returns 'TermA' although none is marked
			Action.NONE,  	// [72] TermA = 
			Action.RETURN,	// [73] MulOp = TIMES
			Action.RETURN,	// [74] MulOp = DIV
			Action.RETURN,	// [75] MulOp = MOD
			RETURN2,	// [76] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [77] Factor = PrimaryExpr
			Action.RETURN,	// [78] PrimaryExpr = LHSExpr
			Action.RETURN,	// [79] PrimaryExpr = FunctionCall
			Action.RETURN,	// [80] PrimaryExpr = ArrayExpr
			Action.RETURN,	// [81] PrimaryExpr = STRING_LITERAL
			Action.RETURN,	// [82] PrimaryExpr = INT_LITERAL
			Action.RETURN,	// [83] PrimaryExpr = TRUE
			Action.RETURN,	// [84] PrimaryExpr = FALSE
			Action.RETURN,	// [85] PrimaryExpr = ParExpr
			RETURN4,	// [86] FunctionCall = ID LPAREN Exprs RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [87] ArrayExpr = LBRACKET NonEmptyExprs RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3	// [88] ParExpr = LPAREN Expr RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
