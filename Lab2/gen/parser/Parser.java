package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short MINUS = 2;
		static public final short LBRACKET = 3;
		static public final short LPAREN = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short SEMICOLON = 9;
		static public final short VOID = 10;
		static public final short BOOLEAN = 11;
		static public final short INT = 12;
		static public final short RPAREN = 13;
		static public final short LCURLY = 14;
		static public final short RBRACKET = 15;
		static public final short PLUS = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short RCURLY = 21;
		static public final short TIMES = 22;
		static public final short DIV = 23;
		static public final short MOD = 24;
		static public final short EQL = 25;
		static public final short COMMA = 26;
		static public final short TYPE = 27;
		static public final short MODULE = 28;
		static public final short ELSE = 29;
		static public final short IMPORT = 30;
		static public final short PUBLIC = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLbbq54KKlTsJ2ADC5X6NG6GHYI51aX124aZ2X0G9GTnmGH54G1P55XN4XLK3RYZ2EVZ" +
		"Xdtxe4GH5We08IfGjY22uX0ZYBeA2EsxFszsLiQTw9cJE8H$CdDjlgLklNbVNgoh0F8XUk1" +
		"B3q0$bw8zA344Xxa9Fv24Lz#1UjC6vE0$dumAae2tQdL9sMapiz9ZObshi#n74zRWPbs40A" +
		"Z0G9cPY5cRBZ#Y01p0A5w4hkYCRv#XCUSbXmaVc6NWgnEpaYHcdcF5aZiMY45Fd5QcnXRpB" +
		"NMFhl0J5EqxUD2I7UDutlyL#Sw$$Oji$I8kRWniYS3EZnEWHnLyGnJyuYl$gAFwXKVp3e$Z" +
		"7D3fkcURlutbxtGvOwqMEuJRCG0cknKZSw8aomUEvm#Evq#EPxF5CzOpkZEWy7pnfhhezLl" +
		"TmFP#D#MYD2xdATBQLJTzGDhqn7hTZ8YPXYfPdSSnvDBSTdj#uPebV6eflMTU5MRU6h8Vit" +
		"QKzEg8pMk4IPRV40bGX2NwSYREepS4yj52xGHMwg3h#1ayYaT$CyJz2xL72#dT3bdoB37wp" +
		"V5o1N5n5RJHX$H$6N5o3ct0tHk0nF87fk0yBkLQUnc8ypjXfp2ATEqC6AxWRzxtkoE8UaSE" +
		"wpLMLaizQBUJtxdFQiWtkrpxkh$7SWLjmjjlPyzoA$WJRdynLtvfxTniFizB5jBvmT6Q2OW" +
		"QfcQoV1gREIr8yQ6FhF2Cinq285#tDe$drk7wksbXZdBv#xwo6syvwCJY$FdNYfqI8Sgey#" +
		"kZEYCupyQIvwhOPWM6jbIBA94zRU3OTk0DruesWCyzuFSzOysXkkxdp2u$VcEMi5ZzdE8vd" +
		"RggootZY6JmPdRF0u4vVpFsXeNe3IWjmru$Zo8xbfzQMiFu1MW6s9V6scKZTHwq$aMH$nHJ" +
		"w4cs6mOmTtLehVhA19RDX$qOGYucbobu8c4ifDrYs6$G$nqSjvIhY1UfR0ADEzPkgyoE1$C" +
		"Fik#X$6$DLx6VOzWxbypIUfPn3kLArlSMsdPIhQTGetphL$vYoDscvlim##zIOzSG1AYzI7" +
		"Y4cizslUCbDoLkDzGRvd3jphUhBzpSx4flLE8nlfgksRDgJb5xZogk0sEgoWwwvcUxoLz1U" +
		"HZcKg2P64kk9ySG6OWhn9Z63s4ZiK3c#JtsRYZUN#dRbdqcxsljEvXfYXT9tgNvVKwzrSVO" +
		"HrhVPG#pM#kydzhhcgDobZoE6i7ruvFaq1hlYZ77vbuj8NQG#ZS4QX$sEkyRVg6HB9Tkxsj" +
		"JQG5vu31oA7Xz7NJa6bQnNKisTEIosd74Yt3RYjNSQfNYiESEpLkbBrVWJbAnYMxhBdwdue" +
		"vMSgEGq9MSfkQ3fkHiz8$lDYKsDqNXyB87woJ$of$n4#PUSa3$aTxX#yZdnctmXX#GpEIW7" +
		"v5Efb$rsIvtTzac8#J7nKSZwaE3Abht41x9JQeLr9Zja4v$l4gmgOSNBwx96gcMrl2Qhv5L" +
		"vHLRA2jbkHzWYssovLLYHijxMTn7BPQsjBvFt#5mdh4dPBToHX1Khh2If8JOJRnFStMIFpJ" +
		"ziFx#teijtyeCSbIEsX$KeNzhQL$9hAFzVv6VvrzR#XbLdbJoLWZmLWhJwyImefLvAlOnxV" +
		"WC6SFUlu8anaDmIsYLipw5iG0yNSXcZ0NtjSuhLJRsSUZ5Z5za0xyn6LEIHtul8vmcKppEp" +
		"WBAG$NhRyF66RVB4iW3UBat2u8tCGHRRkr1QI6FE5hBfYmo3joIVWi6ptkU2mPFO90oUnus" +
		"ZAyV883BPRz1$TbTxr0==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Imports Import; returns 'Import' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declarations Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = AccessSpec TypeName ID LPAREN ParameterList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = AccessSpec TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = AccessSpec TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] AccessSpec = PUBLIC
			Action.NONE,  	// [13] AccessSpec = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = Parameters
			Action.NONE,  	// [24] ParameterList = 
			new Action() {	// [25] Parameters = Parameters COMMA Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [26] Parameters = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [28] Statements = Statements Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [29] Statements = 
			Action.RETURN,	// [30] Statement = LocalVarDec
			Action.RETURN,	// [31] Statement = Bloc
			Action.RETURN,	// [32] Statement = IfState
			Action.RETURN,	// [33] Statement = WhileState
			Action.RETURN,	// [34] Statement = BreakState
			Action.RETURN,	// [35] Statement = ReturnState
			Action.RETURN,	// [36] Statement = ExprState
			RETURN3,	// [37] LocalVarDec = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] Bloc = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [39] IfState = IF LPAREN Expr RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [40] IfState = IF LPAREN Expr RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [41] WhileState = WHILE LPAREN Expr RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [42] BreakState = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] ReturnState = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [44] ReturnState = RETURN Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [45] ExprState = Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [46] Exprs = Exprs Expr; returns 'Expr' although none is marked
			Action.NONE,  	// [47] Exprs = 
			new Action() {	// [48] NonEmptyExprs = NonEmptyExprs Expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [49] NonEmptyExprs = Expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [50] Expr = Assignment
			Action.RETURN,	// [51] Expr = RHSExpr
			RETURN3,	// [52] Assignment = LHSExpr EQL Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [53] LHSExpr = ID
			Action.RETURN,	// [54] LHSExpr = ArrayAccess
			RETURN4,	// [55] ArrayAccess = ArrayAccess LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [56] ArrayAccess = ID LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [57] RHSExpr = ArExpr EQEQ ArExpr; returns 'ArExpr' although none is marked
			RETURN3,	// [58] RHSExpr = ArExpr NEQ ArExpr; returns 'ArExpr' although none is marked
			RETURN3,	// [59] RHSExpr = ArExpr LT ArExpr; returns 'ArExpr' although none is marked
			RETURN3,	// [60] RHSExpr = ArExpr LEQ ArExpr; returns 'ArExpr' although none is marked
			RETURN3,	// [61] RHSExpr = ArExpr GT ArExpr; returns 'ArExpr' although none is marked
			RETURN3,	// [62] RHSExpr = ArExpr GEQ ArExpr; returns 'ArExpr' although none is marked
			Action.RETURN,	// [63] RHSExpr = ArExpr
			RETURN3,	// [64] ArExpr = ArExpr PLUS Term; returns 'Term' although none is marked
			RETURN3,	// [65] ArExpr = ArExpr MINUS Term; returns 'Term' although none is marked
			Action.RETURN,	// [66] ArExpr = Term
			RETURN3,	// [67] Term = Term TIMES Factor; returns 'Factor' although none is marked
			RETURN3,	// [68] Term = Term DIV Factor; returns 'Factor' although none is marked
			RETURN3,	// [69] Term = Term MOD Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [70] Term = Factor
			RETURN2,	// [71] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [72] Factor = PrimaryExpr
			Action.RETURN,	// [73] PrimaryExpr = LHSExpr
			Action.RETURN,	// [74] PrimaryExpr = FunctionCall
			Action.RETURN,	// [75] PrimaryExpr = ArrayExpr
			Action.RETURN,	// [76] PrimaryExpr = STRING_LITERAL
			Action.RETURN,	// [77] PrimaryExpr = INT_LITERAL
			Action.RETURN,	// [78] PrimaryExpr = TRUE
			Action.RETURN,	// [79] PrimaryExpr = FALSE
			Action.RETURN,	// [80] PrimaryExpr = ParExpr
			RETURN4,	// [81] FunctionCall = ID LPAREN Exprs RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [82] ArrayExpr = LBRACKET NonEmptyExprs COMMA RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3	// [83] ParExpr = LPAREN Expr RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
